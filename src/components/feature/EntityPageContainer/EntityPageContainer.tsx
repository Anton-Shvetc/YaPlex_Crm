"use client";

import { useState, ReactNode } from "react";
import { ModalsContainer } from "@/components/feature/ModalsContainer/ModalsContainer";
import { ButtonUi } from "@/components/ui/ButtonUi";
import { ClientFormData } from "@/components/feature/ClientForm/ClientForm";
import { DealFormData } from "@/components/feature/DealForm/DealForm";
import { TaskFormData } from "@/components/feature/TaskForm/TaskForm";

type EntityType = "client" | "deal" | "task";
type PageType = "clients" | "deals" | "tasks";
type FormDataType = ClientFormData | DealFormData | TaskFormData;

type EntityPageContainerProps = {
  entityType: EntityType;
  pageType: PageType;
  sampleData: FormDataType;
  extraContent?: ReactNode;
};

export const EntityPageContainer: React.FC<EntityPageContainerProps> = ({
  entityType,
  pageType,
  sampleData,
  extraContent,
}) => {
  const [modalState, setModalState] = useState<{
    isOpen: boolean;
    type: "new" | "edit" | "view";
    data?: Partial<FormDataType>;
  }>({
    isOpen: false,
    type: "new",
    data: undefined,
  });

  const openModal = (type: "new" | "edit" | "view", data?: Partial<FormDataType>) => {
    setModalState({
      isOpen: true,
      type,
      data,
    });
  };

  const closeModal = () => {
    setModalState((prev) => ({ ...prev, isOpen: false }));
  };

  const handleSubmit = (data: FormDataType) => {
    console.log(`Submitting ${entityType} data:`, data);
    // –ü–æ–¥ –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  };

  const getDemoButtonsTitle = (entityType: EntityType): { edit: string; view: string } => {
    switch (entityType) {
      case "client":
        return {
          edit: '–û—Ç–∫—Ä—ã—Ç—å "–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"',
          view: '–û—Ç–∫—Ä—ã—Ç—å "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞"',
        };
      case "deal":
        return {
          edit: '–û—Ç–∫—Ä—ã—Ç—å "–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–¥–µ–ª–∫–∏"',
          view: '–û—Ç–∫—Ä—ã—Ç—å "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–∫–∏"',
        };
      case "task":
        return {
          edit: '–û—Ç–∫—Ä—ã—Ç—å "–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–¥–∞—á–∏"',
          view: '–û—Ç–∫—Ä—ã—Ç—å "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏"',
        };
      default:
        return {
          edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
          view: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        };
    }
  };

  const getPageTitle = (pageType: PageType): string => {
    switch (pageType) {
      case "clients":
        return "–ö–ª–∏–µ–Ω—Ç—ã";
      case "deals":
        return "–°–¥–µ–ª–∫–∏";
      case "tasks":
        return "–ó–∞–¥–∞—á–∏";
      default:
        return "–î–∞–Ω–Ω—ã–µ";
    }
  };

  const getAddButtonText = (pageType: PageType): string => {
    switch (pageType) {
      case "clients":
        return "–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç";
      case "deals":
        return "–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞";
      case "tasks":
        return "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞";
      default:
        return "–î–æ–±–∞–≤–∏—Ç—å";
    }
  };

  const buttonTitles = getDemoButtonsTitle(entityType);
  const pageTitle = getPageTitle(pageType);
  const addButtonText = getAddButtonText(pageType);

  const DemoButtons = () => (
    <div className="flex space-x-4 mb-6">
      <ButtonUi
        onClick={() => openModal("edit", sampleData)}
        variant="secondary"
      >
        {buttonTitles.edit}
      </ButtonUi>
      <ButtonUi
        onClick={() => openModal("view", sampleData)}
        variant="secondary"
      >
        {buttonTitles.view}
      </ButtonUi>
    </div>
  );

  return (
    <>
      <div className="flex-1 p-4">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{pageTitle}</h1>
        </div>

        <div className="flex items-center mb-6 gap-4">
          <button 
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
            onClick={() => openModal("new")}
          >
            {addButtonText}
          </button>
          <div className="flex-1 relative">
            <input
              type="text"
              placeholder="–ò—Å–∫–∞—Ç—å"
              className="w-full bg-white dark:bg-gray-700 text-gray-900 dark:text-white border border-gray-300 dark:border-gray-600 rounded px-4 py-2 pl-10"
            />
            <span className="absolute left-3 top-2.5 text-gray-400">
              üîç
            </span>
          </div>
        </div>

        <div className="bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden">
          {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö */}
          <div className="p-8 text-center text-gray-500 dark:text-gray-400">
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã &ldquo;{pageTitle}&rdquo; –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–¥–µ—Å—å
          </div>
        </div>
      </div>
      
      {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω */}
      <div className="p-4">
        <DemoButtons />
        {extraContent}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <ModalsContainer
        entityType={entityType}
        modalType={modalState.type}
        isOpen={modalState.isOpen}
        onClose={closeModal}
        initialData={modalState.data}
        onSubmit={handleSubmit}
      />
    </>
  );
}; 